import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    BotCommand
)
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = '7581874786:AAEHu6aCqlQVfsFBgWp0eX_mvXwSKlw7W44'  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# FSM —Å—Ç–∞–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
class OrderForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_address = State()

# –ú–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤"),
    KeyboardButton("‚ùì –ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è")
)

back_to_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é")
)

async def set_commands(bot: Bot):
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),
        BotCommand("help", "–î–æ–ø–æ–º–æ–≥–∞"),
    ]
    await bot.set_my_commands(commands)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:", reply_markup=main_menu)

@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    await message.reply("–Ø –±–æ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤. –ù–∞—Ç–∏—Å–Ω–∏ '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤', —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤–∏—Ç—è–∂–∫–∏ —Ç–∞ –º—ñ—à–∫–∏.")

@dp.message_handler(lambda message: message.text == "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤")
async def send_catalog(message: types.Message):
    photo1 = "https://i.imgur.com/gqXvcI6.jpeg"
    caption1 = (
        "üå¨Ô∏è *–í–º–æ–Ω—Ç–æ–≤–∞–Ω–∞ –≤–∏—Ç—è–∂–∫–∞ Mini Messer Pro*\n\n"
        "‚úÖ –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å: 65–í—Ç\n"
        "üì¶ –£ –∫–æ–º–ø–ª–µ–∫—Ç—ñ: 2 –∑–º—ñ–Ω–Ω—ñ –º—ñ—à–∫–∏\n"
        "‚öôÔ∏è –†–µ–≥—É–ª—é–≤–∞–Ω–Ω—è –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ\n\n"
        "üí∞ *–¶—ñ–Ω–∞:* 5000 –≥—Ä–Ω"
    )
    kb1 = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏", callback_data="buy_1")
    )
    await message.answer_photo(photo=photo1, caption=caption1, parse_mode="Markdown", reply_markup=kb1)

    photo2 = "https://i.imgur.com/A22rY7L.jpeg"
    caption2 = (
        "üß∫ *–ú—ñ—à–∫–∏ –¥–ª—è –≤–∏—Ç—è–∂–∫–∏*\n\n"
        "‚úÖ –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Å—ñ —Ä–æ–∑–º—ñ—Ä–∏\n"
        "üß∞ –î–ª—è –Ω–∞—Å—Ç—ñ–ª—å–Ω–∏—Ö, –ø–µ–¥–∏–∫—é—Ä–Ω–∏—Ö —Ç–∞ –≤—Ä—ñ–∑–Ω–∏—Ö –≤–∏—Ç—è–∂–æ–∫\n\n"
        "üí∞ *–¶—ñ–Ω–∞:*\n"
        "- 1 —à—Ç. ‚Äî 140 –≥—Ä–Ω\n"
        "- 5 —à—Ç. ‚Äî 550 –≥—Ä–Ω\n"
        "- 10 —à—Ç. ‚Äî 900 –≥—Ä–Ω"
    )
    kb2 = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏", callback_data="buy_2")
    )
    await message.answer_photo(photo=photo2, caption=caption2, parse_mode="Markdown", reply_markup=kb2)

    await bot.send_message(message.chat.id, "‚Ü©Ô∏è –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é.", reply_markup=back_to_menu)

@dp.message_handler(lambda message: message.text == "‚ùì –ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è")
async def send_faq(message: types.Message):
    faq = (
        "üìå *–ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è:*\n\n"
        "‚ùì _–ß–∏ —î –≥–∞—Ä–∞–Ω—Ç—ñ—è –Ω–∞ —Ç–æ–≤–∞—Ä–∏?_\n"
        "‚úÖ –¢–∞–∫, —î –≥–∞—Ä–∞–Ω—Ç—ñ—è 1 —Ä—ñ–∫ –Ω–∞ —É—Å—ñ –≤–∏—Ç—è–∂–∫–∏.\n\n"
        "‚ùì _–í —è–∫–∏–π —Å—Ä–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è —Ç–æ–≤–∞—Ä–∏?_\n"
        "‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º 1-–≥–æ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è."
    )
    await message.answer(faq, parse_mode="Markdown")
    await bot.send_message(message.chat.id, "‚Ü©Ô∏è –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é.", reply_markup=back_to_menu)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("buy_"))
async def process_buy_callback(callback_query: types.CallbackQuery):
    await callback_query.answer("–ü–æ—á–∏–Ω–∞—î–º–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!")
    await OrderForm.waiting_for_name.set()
    await bot.send_message(callback_query.from_user.id, "–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")

@dp.message_handler(state=OrderForm.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await OrderForm.next()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

@dp.message_handler(state=OrderForm.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await OrderForm.next()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à—É –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–°–∞–º–æ–≤–∏–≤—ñ–∑':")

@dp.message_handler(state=OrderForm.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data['name']
    phone = data['phone']
    address = message.text

    await message.answer(
        f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n\n"
        f"üë§ –Ü–º‚Äô—è: {name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {address}\n\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!"
    )
    await state.finish()

@dp.message_handler(lambda message: message.text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message):
    await message.answer("–¢–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é:", reply_markup=main_menu)

async def on_start():
    await set_commands(bot)
    await bot.delete_webhook()

if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(on_start())
    executor.start_polling(dp, skip_updates=True)
