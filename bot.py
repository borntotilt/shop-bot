import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.utils import executor

API_TOKEN = '–í–ê–®_–¢–û–ö–ï–ù_–¢–£–¢'

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤"),
    KeyboardButton("‚ùì –ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è")
)

# /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:", reply_markup=main_menu)

# /help
@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    await message.reply("–Ø –±–æ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤. –ù–∞—Ç–∏—Å–Ω–∏ '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤' —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤–∏—Ç—è–∂–∫–∏ —Ç–∞ –º—ñ—à–∫–∏.")

# –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤
@dp.message_handler(lambda message: message.text == "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤")
async def send_catalog(message: types.Message):
    # 1 —Ç–æ–≤–∞—Ä
    photo1 = "https://i.imgur.com/XXXXXXXX.jpg"  # –≤—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ
    caption1 = (
        "üå¨Ô∏è *–í–º–æ–Ω—Ç–æ–≤–∞–Ω–∞ –≤–∏—Ç—è–∂–∫–∞ Mini Messer Pro*\n\n"
        "‚úÖ –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å: 65–í—Ç\n"
        "üì¶ –£ –∫–æ–º–ø–ª–µ–∫—Ç—ñ: 2 –∑–º—ñ–Ω–Ω—ñ –º—ñ—à–∫–∏\n"
        "‚öôÔ∏è –†–µ–≥—É–ª—é–≤–∞–Ω–Ω—è –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ\n\n"
        "üí∞ *–¶—ñ–Ω–∞:* 5000 –≥—Ä–Ω"
    )
    kb1 = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏", callback_data="buy_1")
    )
    await message.answer_photo(photo=photo1, caption=caption1, parse_mode="Markdown", reply_markup=kb1)

    # 2 —Ç–æ–≤–∞—Ä
    photo2 = "https://i.imgur.com/YYYYYYYY.jpg"  # –≤—Å—Ç–∞–≤—å –≤—Ç–æ—Ä—É—é —Å—Å—ã–ª–∫—É
    caption2 = (
        "üß∫ *–ú—ñ—à–∫–∏ –¥–ª—è –≤–∏—Ç—è–∂–∫–∏*\n\n"
        "‚úÖ –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Å—ñ —Ä–æ–∑–º—ñ—Ä–∏\n"
        "üß∞ –î–ª—è –Ω–∞—Å—Ç—ñ–ª—å–Ω–∏—Ö, –ø–µ–¥–∏–∫—é—Ä–Ω–∏—Ö —Ç–∞ –≤—Ä—ñ–∑–Ω–∏—Ö –≤–∏—Ç—è–∂–æ–∫\n\n"
        "üí∞ *–¶—ñ–Ω–∞:*\n"
        "- 1 —à—Ç. ‚Äî 140 –≥—Ä–Ω\n"
        "- 5 —à—Ç. ‚Äî 550 –≥—Ä–Ω\n"
        "- 10 —à—Ç. ‚Äî 900 –≥—Ä–Ω"
    )
    kb2 = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏", callback_data="buy_2")
    )
    await message.answer_photo(photo=photo2, caption=caption2, parse_mode="Markdown", reply_markup=kb2)

# –ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è
@dp.message_handler(lambda message: message.text == "‚ùì –ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è")
async def send_faq(message: types.Message):
    faq = (
        "üìå *–ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è:*\n\n"
        "‚ùì _–ß–∏ —î –≥–∞—Ä–∞–Ω—Ç—ñ—è –Ω–∞ —Ç–æ–≤–∞—Ä–∏?_\n"
        "‚úÖ –¢–∞–∫, —î –≥–∞—Ä–∞–Ω—Ç—ñ—è 1 —Ä—ñ–∫ –Ω–∞ —É—Å—ñ –≤–∏—Ç—è–∂–∫–∏.\n\n"
        "‚ùì _–í —è–∫–∏–π —Å—Ä–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è —Ç–æ–≤–∞—Ä–∏?_\n"
        "‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º 1-–≥–æ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è."
    )
    await message.answer(faq, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç–∏"
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("buy_"))
async def process_buy_callback(callback_query: types.CallbackQuery):
    await callback_query.answer("–¶–µ –¥–µ–º–æ. –ö—É–ø—ñ–≤–ª—è —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")

# –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def on_start():
    await bot.delete_webhook()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(on_start())

    executor.start_polling(dp, skip_updates=True)
